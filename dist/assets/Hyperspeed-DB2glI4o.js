import{r as C,j as le}from"./vendor_react-Cc2E5jzY.js";import{b2 as f,b3 as ce,b4 as de,b5 as me,b6 as fe,b7 as ge,b8 as pe,b9 as ve,ba as B,bb as we,bc as b,bd as Pe,be as xe,bf as h,bg as j,bh as v,bi as q,bj as $,bk as m,bl as U,bm as ye,bn as Le,bo as G,bp as y,bq as H}from"./vendor-CBjGBlE2.js";const De=({effectOptions:W={onSpeedUp:()=>{},onSlowDown:()=>{},distortion:"turbulentDistortion",length:400,roadWidth:10,islandWidth:2,lanesPerRoad:4,fov:90,fovSpeedUp:150,speedUp:2,carLightsFade:.4,totalSideLightSticks:20,lightPairsPerRoadWay:40,shoulderLinesWidthPercentage:.05,brokenLinesWidthPercentage:.1,brokenLinesLengthPercentage:.5,lightStickWidth:[.12,.5],lightStickHeight:[1.3,1.7],movingAwaySpeed:[60,80],movingCloserSpeed:[-120,-160],carLightsLength:[400*.03,400*.2],carLightsRadius:[.05,.14],carWidthPercentage:[.3,.5],carShiftX:[-.8,.8],carFloorSeparation:[0,5],colors:{roadColor:526344,islandColor:657930,background:0,shoulderLines:16777215,brokenLines:16777215,leftCars:[14177983,6770850,12732332],rightCars:[242627,941733,3294549],sticks:242627}}})=>{const V=C.useRef(null),L=C.useRef(null);return C.useEffect(()=>{if(L.current){L.current.dispose();const i=document.getElementById("lights");if(i)for(;i.firstChild;)i.removeChild(i.firstChild)}const D={uFreq:{value:new h(3,6,10)},uAmp:{value:new h(30,30,20)}},T={uFreq:{value:new f(5,2)},uAmp:{value:new f(25,15)}},I={uFreq:{value:new f(2,3)},uAmp:{value:new f(35,10)}},A={uFreq:{value:new H(4,8,8,1)},uAmp:{value:new H(25,5,10,10)}},M={uFreq:{value:new f(4,8)},uAmp:{value:new f(10,20)},uPowY:{value:new f(20,2)}};let w=i=>Math.sin(i)*.5+.5;const J={mountainDistortion:{uniforms:D,getDistortion:"\n          uniform vec3 uAmp;\n          uniform vec3 uFreq;\n          #define PI 3.14159265358979\n          float nsin(float val){\n            return sin(val) * 0.5 + 0.5;\n          }\n          vec3 getDistortion(float progress){\n            float movementProgressFix = 0.02;\n            return vec3( \n              cos(progress * PI * uFreq.x + uTime) * uAmp.x - cos(movementProgressFix * PI * uFreq.x + uTime) * uAmp.x,\n              nsin(progress * PI * uFreq.y + uTime) * uAmp.y - nsin(movementProgressFix * PI * uFreq.y + uTime) * uAmp.y,\n              nsin(progress * PI * uFreq.z + uTime) * uAmp.z - nsin(movementProgressFix * PI * uFreq.z + uTime) * uAmp.z\n            );\n          }\n        ",getJS:(i,e)=>{let t=.02,o=D.uFreq.value,s=D.uAmp.value,r=new h(Math.cos(i*Math.PI*o.x+e)*s.x-Math.cos(t*Math.PI*o.x+e)*s.x,w(i*Math.PI*o.y+e)*s.y-w(t*Math.PI*o.y+e)*s.y,w(i*Math.PI*o.z+e)*s.z-w(t*Math.PI*o.z+e)*s.z),n=new h(2,2,2),u=new h(0,0,-5);return r.multiply(n).add(u)}},xyDistortion:{uniforms:T,getDistortion:"\n          uniform vec2 uFreq;\n          uniform vec2 uAmp;\n          #define PI 3.14159265358979\n          vec3 getDistortion(float progress){\n            float movementProgressFix = 0.02;\n            return vec3( \n              cos(progress * PI * uFreq.x + uTime) * uAmp.x - cos(movementProgressFix * PI * uFreq.x + uTime) * uAmp.x,\n              sin(progress * PI * uFreq.y + PI/2. + uTime) * uAmp.y - sin(movementProgressFix * PI * uFreq.y + PI/2. + uTime) * uAmp.y,\n              0.\n            );\n          }\n        ",getJS:(i,e)=>{let t=.02,o=T.uFreq.value,s=T.uAmp.value,r=new h(Math.cos(i*Math.PI*o.x+e)*s.x-Math.cos(t*Math.PI*o.x+e)*s.x,Math.sin(i*Math.PI*o.y+e+Math.PI/2)*s.y-Math.sin(t*Math.PI*o.y+e+Math.PI/2)*s.y,0),n=new h(2,.4,1),u=new h(0,0,-3);return r.multiply(n).add(u)}},LongRaceDistortion:{uniforms:I,getDistortion:"\n          uniform vec2 uFreq;\n          uniform vec2 uAmp;\n          #define PI 3.14159265358979\n          vec3 getDistortion(float progress){\n            float camProgress = 0.0125;\n            return vec3( \n              sin(progress * PI * uFreq.x + uTime) * uAmp.x - sin(camProgress * PI * uFreq.x + uTime) * uAmp.x,\n              sin(progress * PI * uFreq.y + uTime) * uAmp.y - sin(camProgress * PI * uFreq.y + uTime) * uAmp.y,\n              0.\n            );\n          }\n        ",getJS:(i,e)=>{let t=.0125,o=I.uFreq.value,s=I.uAmp.value,r=new h(Math.sin(i*Math.PI*o.x+e)*s.x-Math.sin(t*Math.PI*o.x+e)*s.x,Math.sin(i*Math.PI*o.y+e)*s.y-Math.sin(t*Math.PI*o.y+e)*s.y,0),n=new h(1,1,0),u=new h(0,0,-5);return r.multiply(n).add(u)}},turbulentDistortion:{uniforms:A,getDistortion:"\n          uniform vec4 uFreq;\n          uniform vec4 uAmp;\n          float nsin(float val){\n            return sin(val) * 0.5 + 0.5;\n          }\n          #define PI 3.14159265358979\n          float getDistortionX(float progress){\n            return (\n              cos(PI * progress * uFreq.r + uTime) * uAmp.r +\n              pow(cos(PI * progress * uFreq.g + uTime * (uFreq.g / uFreq.r)), 2. ) * uAmp.g\n            );\n          }\n          float getDistortionY(float progress){\n            return (\n              -nsin(PI * progress * uFreq.b + uTime) * uAmp.b +\n              -pow(nsin(PI * progress * uFreq.a + uTime / (uFreq.b / uFreq.a)), 5.) * uAmp.a\n            );\n          }\n          vec3 getDistortion(float progress){\n            return vec3(\n              getDistortionX(progress) - getDistortionX(0.0125),\n              getDistortionY(progress) - getDistortionY(0.0125),\n              0.\n            );\n          }\n        ",getJS:(i,e)=>{const t=A.uFreq.value,o=A.uAmp.value,s=a=>Math.cos(Math.PI*a*t.x+e)*o.x+Math.pow(Math.cos(Math.PI*a*t.y+e*(t.y/t.x)),2)*o.y,r=a=>-w(Math.PI*a*t.z+e)*o.z-Math.pow(w(Math.PI*a*t.w+e/(t.z/t.w)),5)*o.w;let n=new h(s(i)-s(i+.007),r(i)-r(i+.007),0),u=new h(-2,-5,0),l=new h(0,0,-10);return n.multiply(u).add(l)}},turbulentDistortionStill:{uniforms:A,getDistortion:"\n          uniform vec4 uFreq;\n          uniform vec4 uAmp;\n          float nsin(float val){\n            return sin(val) * 0.5 + 0.5;\n          }\n          #define PI 3.14159265358979\n          float getDistortionX(float progress){\n            return (\n              cos(PI * progress * uFreq.r) * uAmp.r +\n              pow(cos(PI * progress * uFreq.g * (uFreq.g / uFreq.r)), 2. ) * uAmp.g\n            );\n          }\n          float getDistortionY(float progress){\n            return (\n              -nsin(PI * progress * uFreq.b) * uAmp.b +\n              -pow(nsin(PI * progress * uFreq.a / (uFreq.b / uFreq.a)), 5.) * uAmp.a\n            );\n          }\n          vec3 getDistortion(float progress){\n            return vec3(\n              getDistortionX(progress) - getDistortionX(0.02),\n              getDistortionY(progress) - getDistortionY(0.02),\n              0.\n            );\n          }\n        "},deepDistortionStill:{uniforms:M,getDistortion:"\n          uniform vec4 uFreq;\n          uniform vec4 uAmp;\n          uniform vec2 uPowY;\n          float nsin(float val){\n            return sin(val) * 0.5 + 0.5;\n          }\n          #define PI 3.14159265358979\n          float getDistortionX(float progress){\n            return (\n              sin(progress * PI * uFreq.x) * uAmp.x * 2.\n            );\n          }\n          float getDistortionY(float progress){\n            return (\n              pow(abs(progress * uPowY.x), uPowY.y) + sin(progress * PI * uFreq.y) * uAmp.y\n            );\n          }\n          vec3 getDistortion(float progress){\n            return vec3(\n              getDistortionX(progress) - getDistortionX(0.02),\n              getDistortionY(progress) - getDistortionY(0.05),\n              0.\n            );\n          }\n        "},deepDistortion:{uniforms:M,getDistortion:"\n          uniform vec4 uFreq;\n          uniform vec4 uAmp;\n          uniform vec2 uPowY;\n          float nsin(float val){\n            return sin(val) * 0.5 + 0.5;\n          }\n          #define PI 3.14159265358979\n          float getDistortionX(float progress){\n            return (\n              sin(progress * PI * uFreq.x + uTime) * uAmp.x\n            );\n          }\n          float getDistortionY(float progress){\n            return (\n              pow(abs(progress * uPowY.x), uPowY.y) + sin(progress * PI * uFreq.y + uTime) * uAmp.y\n            );\n          }\n          vec3 getDistortion(float progress){\n            return vec3(\n              getDistortionX(progress) - getDistortionX(0.02),\n              getDistortionY(progress) - getDistortionY(0.02),\n              0.\n            );\n          }\n        ",getJS:(i,e)=>{const t=M.uFreq.value,o=M.uAmp.value,s=M.uPowY.value,r=d=>Math.sin(d*Math.PI*t.x+e)*o.x,n=d=>Math.pow(d*s.x,s.y)+Math.sin(d*Math.PI*t.y+e)*o.y;let u=new h(r(i)-r(i+.01),n(i)-n(i+.01),0),l=new h(-2,-4,0),a=new h(0,0,-10);return u.multiply(l).add(a)}}};class N{constructor(e,t={}){this.options=t,this.options.distortion==null&&(this.options.distortion={uniforms:Z,getDistortion:K}),this.container=e,this.renderer=new ce({antialias:!1,alpha:!0}),this.renderer.setSize(e.offsetWidth,e.offsetHeight,!1),this.renderer.setPixelRatio(window.devicePixelRatio),this.composer=new de(this.renderer),e.append(this.renderer.domElement),this.camera=new me(t.fov,e.offsetWidth/e.offsetHeight,.1,1e4),this.camera.position.z=-5,this.camera.position.y=8,this.camera.position.x=0,this.scene=new fe,this.scene.background=null;let o=new ge(t.colors.background,t.length*.2,t.length*500);this.scene.fog=o,this.fogUniforms={fogColor:{value:o.color},fogNear:{value:o.near},fogFar:{value:o.far}},this.clock=new pe,this.assets={},this.disposed=!1,this.road=new ie(this,t),this.leftCarLights=new z(this,t,t.colors.leftCars,t.movingAwaySpeed,new f(0,1-t.carLightsFade)),this.rightCarLights=new z(this,t,t.colors.rightCars,t.movingCloserSpeed,new f(1,0+t.carLightsFade)),this.leftSticks=new te(this,t),this.fovTarget=t.fov,this.speedUpTarget=0,this.speedUp=0,this.timeOffset=0,this.tick=this.tick.bind(this),this.init=this.init.bind(this),this.setSize=this.setSize.bind(this),this.onMouseDown=this.onMouseDown.bind(this),this.onMouseUp=this.onMouseUp.bind(this),this.onTouchStart=this.onTouchStart.bind(this),this.onTouchEnd=this.onTouchEnd.bind(this),this.onContextMenu=this.onContextMenu.bind(this),window.addEventListener("resize",this.onWindowResize.bind(this))}onWindowResize(){const e=this.container.offsetWidth,t=this.container.offsetHeight;this.renderer.setSize(e,t),this.camera.aspect=e/t,this.camera.updateProjectionMatrix(),this.composer.setSize(e,t)}initPasses(){this.renderPass=new ve(this.scene,this.camera),this.bloomPass=new B(this.camera,new we({luminanceThreshold:.2,luminanceSmoothing:0,resolutionScale:1}));const e=new B(this.camera,new b({preset:Pe.MEDIUM,searchImage:b.searchImageDataURL,areaImage:b.areaImageDataURL}));this.renderPass.renderToScreen=!1,this.bloomPass.renderToScreen=!1,e.renderToScreen=!0,this.composer.addPass(this.renderPass),this.composer.addPass(this.bloomPass),this.composer.addPass(e)}loadAssets(){const e=this.assets;return new Promise(t=>{const o=new xe(t),s=new Image,r=new Image;e.smaa={},s.addEventListener("load",function(){e.smaa.search=this,o.itemEnd("smaa-search")}),r.addEventListener("load",function(){e.smaa.area=this,o.itemEnd("smaa-area")}),o.itemStart("smaa-search"),o.itemStart("smaa-area"),s.src=b.searchImageDataURL,r.src=b.areaImageDataURL})}init(){this.initPasses();const e=this.options;this.road.init(),this.leftCarLights.init(),this.leftCarLights.mesh.position.setX(-e.roadWidth/2-e.islandWidth/2),this.rightCarLights.init(),this.rightCarLights.mesh.position.setX(e.roadWidth/2+e.islandWidth/2),this.leftSticks.init(),this.leftSticks.mesh.position.setX(-(e.roadWidth+e.islandWidth/2)),this.container.addEventListener("mousedown",this.onMouseDown),this.container.addEventListener("mouseup",this.onMouseUp),this.container.addEventListener("mouseout",this.onMouseUp),this.container.addEventListener("touchstart",this.onTouchStart,{passive:!0}),this.container.addEventListener("touchend",this.onTouchEnd,{passive:!0}),this.container.addEventListener("touchcancel",this.onTouchEnd,{passive:!0}),this.container.addEventListener("contextmenu",this.onContextMenu),this.tick()}onMouseDown(e){this.options.onSpeedUp&&this.options.onSpeedUp(e),this.fovTarget=this.options.fovSpeedUp,this.speedUpTarget=this.options.speedUp}onMouseUp(e){this.options.onSlowDown&&this.options.onSlowDown(e),this.fovTarget=this.options.fov,this.speedUpTarget=0}onTouchStart(e){this.options.onSpeedUp&&this.options.onSpeedUp(e),this.fovTarget=this.options.fovSpeedUp,this.speedUpTarget=this.options.speedUp}onTouchEnd(e){this.options.onSlowDown&&this.options.onSlowDown(e),this.fovTarget=this.options.fov,this.speedUpTarget=0}onContextMenu(e){e.preventDefault()}update(e){let t=Math.exp(-(-60*Math.log2(.9))*e);this.speedUp+=E(this.speedUp,this.speedUpTarget,t,1e-5),this.timeOffset+=this.speedUp*e;let o=this.clock.elapsedTime+this.timeOffset;this.rightCarLights.update(o),this.leftCarLights.update(o),this.leftSticks.update(o),this.road.update(o);let s=!1,r=E(this.camera.fov,this.fovTarget,t);if(r!==0&&(this.camera.fov+=r*e*6,s=!0),this.options.distortion.getJS){const n=this.options.distortion.getJS(.025,o);this.camera.lookAt(new h(this.camera.position.x+n.x,this.camera.position.y+n.y,this.camera.position.z+n.z)),s=!0}s&&this.camera.updateProjectionMatrix(),this.options.isHyper}render(e){this.composer.render(e)}dispose(){this.disposed=!0,this.renderer&&this.renderer.dispose(),this.composer&&this.composer.dispose(),this.scene&&this.scene.clear(),window.removeEventListener("resize",this.onWindowResize.bind(this)),this.container&&(this.container.removeEventListener("mousedown",this.onMouseDown),this.container.removeEventListener("mouseup",this.onMouseUp),this.container.removeEventListener("mouseout",this.onMouseUp),this.container.removeEventListener("touchstart",this.onTouchStart),this.container.removeEventListener("touchend",this.onTouchEnd),this.container.removeEventListener("touchcancel",this.onTouchEnd),this.container.removeEventListener("contextmenu",this.onContextMenu))}setSize(e,t,o){this.composer.setSize(e,t,o)}tick(){if(this.disposed||!this)return;if(ue(this.renderer,this.setSize)){const t=this.renderer.domElement;this.camera.aspect=t.clientWidth/t.clientHeight,this.camera.updateProjectionMatrix()}const e=this.clock.getDelta();this.render(e),this.update(e),requestAnimationFrame(this.tick)}}const Z={uDistortionX:{value:new f(80,3)},uDistortionY:{value:new f(-40,2.5)}},K="\n      #define PI 3.14159265358979\n      uniform vec2 uDistortionX;\n      uniform vec2 uDistortionY;\n      float nsin(float val){\n        return sin(val) * 0.5 + 0.5;\n      }\n      vec3 getDistortion(float progress){\n        progress = clamp(progress, 0., 1.);\n        float xAmp = uDistortionX.r;\n        float xFreq = uDistortionX.g;\n        float yAmp = uDistortionY.r;\n        float yFreq = uDistortionY.g;\n        return vec3( \n          xAmp * nsin(progress * PI * xFreq - PI / 2.),\n          yAmp * nsin(progress * PI * yFreq - PI / 2.),\n          0.\n        );\n      }\n    ",g=i=>Array.isArray(i)?Math.random()*(i[1]-i[0])+i[0]:Math.random()*i,_=i=>Array.isArray(i)?i[Math.floor(Math.random()*i.length)]:i;function E(i,e,t=.1,o=.001){let s=(e-i)*t;return Math.abs(s)<o&&(s=e-i),s}class z{constructor(e,t,o,s,r){this.webgl=e,this.options=t,this.colors=o,this.speed=s,this.fade=r}init(){const e=this.options;let t=new ye(new h(0,0,0),new h(0,0,-1)),o=new Le(t,40,1,8,!1),s=new G().copy(o);s.instanceCount=e.lightPairsPerRoadWay*2;let r=e.roadWidth/e.lanesPerRoad,n=[],u=[],l=[],a=this.colors;Array.isArray(a)?a=a.map(c=>new v(c)):a=new v(a);for(let c=0;c<e.lightPairsPerRoadWay;c++){let F=g(e.carLightsRadius),S=g(e.carLightsLength),P=g(this.speed),k=c%e.lanesPerRoad*r-e.roadWidth/2+r/2,R=g(e.carWidthPercentage)*r,he=g(e.carShiftX)*r;k+=he;let O=g(e.carFloorSeparation)+F*1.3,X=-g(e.length);n.push(k-R/2),n.push(O),n.push(X),n.push(k+R/2),n.push(O),n.push(X),u.push(F),u.push(S),u.push(P),u.push(F),u.push(S),u.push(P);let x=_(a);l.push(x.r),l.push(x.g),l.push(x.b),l.push(x.r),l.push(x.g),l.push(x.b)}s.setAttribute("aOffset",new y(new Float32Array(n),3,!1)),s.setAttribute("aMetrics",new y(new Float32Array(u),3,!1)),s.setAttribute("aColor",new y(new Float32Array(l),3,!1));let d=new q({fragmentShader:Q,vertexShader:ee,transparent:!0,uniforms:Object.assign({uTime:{value:0},uTravelLength:{value:e.length},uFade:{value:this.fade}},this.webgl.fogUniforms,e.distortion.uniforms)});d.onBeforeCompile=c=>{c.vertexShader=c.vertexShader.replace("#include <getDistortion_vertex>",e.distortion.getDistortion)};let p=new U(s,d);p.frustumCulled=!1,this.webgl.scene.add(p),this.mesh=p}update(e){this.mesh.material.uniforms.uTime.value=e}}const Q="\n      #define USE_FOG;\n      ".concat(m.fog_pars_fragment,"\n      varying vec3 vColor;\n      varying vec2 vUv; \n      uniform vec2 uFade;\n      void main() {\n        vec3 color = vec3(vColor);\n        float alpha = smoothstep(uFade.x, uFade.y, vUv.x);\n        gl_FragColor = vec4(color, alpha);\n        if (gl_FragColor.a < 0.0001) discard;\n        ").concat(m.fog_fragment,"\n      }\n    "),ee="\n      #define USE_FOG;\n      ".concat(m.fog_pars_vertex,"\n      attribute vec3 aOffset;\n      attribute vec3 aMetrics;\n      attribute vec3 aColor;\n      uniform float uTravelLength;\n      uniform float uTime;\n      varying vec2 vUv; \n      varying vec3 vColor; \n      #include <getDistortion_vertex>\n      void main() {\n        vec3 transformed = position.xyz;\n        float radius = aMetrics.r;\n        float myLength = aMetrics.g;\n        float speed = aMetrics.b;\n\n        transformed.xy *= radius;\n        transformed.z *= myLength;\n\n        transformed.z += myLength - mod(uTime * speed + aOffset.z, uTravelLength);\n        transformed.xy += aOffset.xy;\n\n        float progress = abs(transformed.z / uTravelLength);\n        transformed.xyz += getDistortion(progress);\n\n        vec4 mvPosition = modelViewMatrix * vec4(transformed, 1.);\n        gl_Position = projectionMatrix * mvPosition;\n        vUv = uv;\n        vColor = aColor;\n        ").concat(m.fog_vertex,"\n      }\n    ");class te{constructor(e,t){this.webgl=e,this.options=t}init(){const e=this.options,t=new j(1,1);let o=new G().copy(t),s=e.totalSideLightSticks;o.instanceCount=s;let r=e.length/(s-1);const n=[],u=[],l=[];let a=e.colors.sticks;Array.isArray(a)?a=a.map(c=>new v(c)):a=new v(a);for(let c=0;c<s;c++){let F=g(e.lightStickWidth),S=g(e.lightStickHeight);n.push((c-1)*r*2+r*Math.random());let P=_(a);u.push(P.r),u.push(P.g),u.push(P.b),l.push(F),l.push(S)}o.setAttribute("aOffset",new y(new Float32Array(n),1,!1)),o.setAttribute("aColor",new y(new Float32Array(u),3,!1)),o.setAttribute("aMetrics",new y(new Float32Array(l),2,!1));const d=new q({fragmentShader:oe,vertexShader:se,side:$,uniforms:Object.assign({uTravelLength:{value:e.length},uTime:{value:0}},this.webgl.fogUniforms,e.distortion.uniforms)});d.onBeforeCompile=c=>{c.vertexShader=c.vertexShader.replace("#include <getDistortion_vertex>",e.distortion.getDistortion)};const p=new U(o,d);p.frustumCulled=!1,this.webgl.scene.add(p),this.mesh=p}update(e){this.mesh.material.uniforms.uTime.value=e}}const se="\n      #define USE_FOG;\n      ".concat(m.fog_pars_vertex,"\n      attribute float aOffset;\n      attribute vec3 aColor;\n      attribute vec2 aMetrics;\n      uniform float uTravelLength;\n      uniform float uTime;\n      varying vec3 vColor;\n      mat4 rotationY( in float angle ) {\n        return mat4(	cos(angle),		0,		sin(angle),	0,\n                     0,		1.0,			 0,	0,\n                -sin(angle),	0,		cos(angle),	0,\n                0, 		0,				0,	1);\n      }\n      #include <getDistortion_vertex>\n      void main(){\n        vec3 transformed = position.xyz;\n        float width = aMetrics.x;\n        float height = aMetrics.y;\n\n        transformed.xy *= vec2(width, height);\n        float time = mod(uTime * 60. * 2. + aOffset, uTravelLength);\n\n        transformed = (rotationY(3.14/2.) * vec4(transformed,1.)).xyz;\n\n        transformed.z += - uTravelLength + time;\n\n        float progress = abs(transformed.z / uTravelLength);\n        transformed.xyz += getDistortion(progress);\n\n        transformed.y += height / 2.;\n        transformed.x += -width / 2.;\n        vec4 mvPosition = modelViewMatrix * vec4(transformed, 1.);\n        gl_Position = projectionMatrix * mvPosition;\n        vColor = aColor;\n        ").concat(m.fog_vertex,"\n      }\n    "),oe="\n      #define USE_FOG;\n      ".concat(m.fog_pars_fragment,"\n      varying vec3 vColor;\n      void main(){\n        vec3 color = vec3(vColor);\n        gl_FragColor = vec4(color,1.);\n        ").concat(m.fog_fragment,"\n      }\n    ");class ie{constructor(e,t){this.webgl=e,this.options=t,this.uTime={value:0}}createPlane(e,t,o){const s=this.options;let r=100;const n=new j(o?s.roadWidth:s.islandWidth,s.length,20,r);let u={uTravelLength:{value:s.length},uColor:{value:new v(o?s.colors.roadColor:s.colors.islandColor)},uTime:this.uTime};o&&(u=Object.assign(u,{uLanes:{value:s.lanesPerRoad},uBrokenLinesColor:{value:new v(s.colors.brokenLines)},uShoulderLinesColor:{value:new v(s.colors.shoulderLines)},uShoulderLinesWidthPercentage:{value:s.shoulderLinesWidthPercentage},uBrokenLinesLengthPercentage:{value:s.brokenLinesLengthPercentage},uBrokenLinesWidthPercentage:{value:s.brokenLinesWidthPercentage}}));const l=new q({fragmentShader:o?ne:re,vertexShader:ae,side:$,uniforms:Object.assign(u,this.webgl.fogUniforms,s.distortion.uniforms)});l.onBeforeCompile=d=>{d.vertexShader=d.vertexShader.replace("#include <getDistortion_vertex>",s.distortion.getDistortion)};const a=new U(n,l);return a.rotation.x=-Math.PI/2,a.position.z=-s.length/2,a.position.x+=(this.options.islandWidth/2+s.roadWidth/2)*e,this.webgl.scene.add(a),a}init(){this.leftRoadWay=this.createPlane(-1,this.options.roadWidth,!0),this.rightRoadWay=this.createPlane(1,this.options.roadWidth,!0),this.island=this.createPlane(0,this.options.islandWidth,!1)}update(e){this.uTime.value=e}}const Y="\n      #define USE_FOG;\n      varying vec2 vUv; \n      uniform vec3 uColor;\n      uniform float uTime;\n      #include <roadMarkings_vars>\n      ".concat(m.fog_pars_fragment,"\n      void main() {\n        vec2 uv = vUv;\n        vec3 color = vec3(uColor);\n        #include <roadMarkings_fragment>\n        gl_FragColor = vec4(color, 1.);\n        ").concat(m.fog_fragment,"\n      }\n    "),re=Y.replace("#include <roadMarkings_fragment>","").replace("#include <roadMarkings_vars>",""),ne=Y.replace("#include <roadMarkings_fragment>","\n      uv.y = mod(uv.y + uTime * 0.05, 1.);\n      float laneWidth = 1.0 / uLanes;\n      float brokenLineWidth = laneWidth * uBrokenLinesWidthPercentage;\n      float laneEmptySpace = 1. - uBrokenLinesLengthPercentage;\n\n      float brokenLines = step(1.0 - brokenLineWidth, fract(uv.x * 2.0)) * step(laneEmptySpace, fract(uv.y * 10.0));\n      float sideLines = step(1.0 - brokenLineWidth, fract((uv.x - laneWidth * (uLanes - 1.0)) * 2.0)) + step(brokenLineWidth, uv.x);\n\n      brokenLines = mix(brokenLines, sideLines, uv.x);\n    ").replace("#include <roadMarkings_vars>","\n      uniform float uLanes;\n      uniform vec3 uBrokenLinesColor;\n      uniform vec3 uShoulderLinesColor;\n      uniform float uShoulderLinesWidthPercentage;\n      uniform float uBrokenLinesWidthPercentage;\n      uniform float uBrokenLinesLengthPercentage;\n      highp float random(vec2 co) {\n        highp float a = 12.9898;\n        highp float b = 78.233;\n        highp float c = 43758.5453;\n        highp float dt = dot(co.xy, vec2(a, b));\n        highp float sn = mod(dt, 3.14);\n        return fract(sin(sn) * c);\n      }\n    "),ae="\n      #define USE_FOG;\n      uniform float uTime;\n      ".concat(m.fog_pars_vertex,"\n      uniform float uTravelLength;\n      varying vec2 vUv; \n      #include <getDistortion_vertex>\n      void main() {\n        vec3 transformed = position.xyz;\n        vec3 distortion = getDistortion((transformed.y + uTravelLength / 2.) / uTravelLength);\n        transformed.x += distortion.x;\n        transformed.z += distortion.y;\n        transformed.y += -1. * distortion.z;  \n        \n        vec4 mvPosition = modelViewMatrix * vec4(transformed, 1.);\n        gl_Position = projectionMatrix * mvPosition;\n        vUv = uv;\n        ").concat(m.fog_vertex,"\n      }\n    ");function ue(i,e){const t=i.domElement,o=t.clientWidth,s=t.clientHeight,r=t.width!==o||t.height!==s;return r&&e(o,s,!1),r}return(function(){const i=document.getElementById("lights"),e={...W};e.distortion=J[e.distortion];const t=new N(i,e);L.current=t,t.loadAssets().then(t.init)})(),()=>{L.current&&L.current.dispose()}},[W]),le.jsx("div",{id:"lights",className:"w-full h-full",ref:V})};export{De as default};
